{"version":3,"sources":["components/Wrapper/Wrapper.js","components/MyBootstrap/FriendsBootstrap.js","components/FriendsCards/FendCards.js","components/NavBar/NavBar.js","components/Score/Score.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Bootstrap","FendCards","alt","name","src","image","id","onClick","ClickedId","NavBar","scores","highscore","Score","App","state","score","highScore","fendId","fendCards","outCome","userClicked","indexOf","push","console","log","setState","this","sort","shuffleFendsCard","Math","random","map","key","ShuffleFendsCard","FendsCard","clickIt","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"syDAWeA,G,MARC,SAACC,GACb,OACI,yBAAKC,UAAU,WACf,6BAAMD,EAAME,aCYLC,G,MAfG,SAACH,GACf,OAII,yBAAKC,UAAW,WACZ,wBAAIA,UAAU,aAAd,uBAEA,uBAAGA,UAAU,QAAb,yFCUGG,G,MAjBG,SAACJ,GAEf,OAEI,yBAAKC,UAAU,uBACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,OAEf,yBAAKI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,MAAOC,GAAIT,EAAMS,GAClDC,QAAS,kBAAMV,EAAMW,UAAUX,EAAMS,YCqBtCG,EA/BA,SAACZ,GAChB,OACI,yBAAKC,UAAU,YAAYQ,GAAG,OAItB,yBAAKR,UAAU,OACX,yBAAKA,UAAU,YAAW,sCAAYD,EAAMa,SAC7C,yBAAKZ,UAAU,aACd,yBAAKA,UAAU,YAAW,2CAAiBD,EAAMc,eCMlDC,G,MAdD,SAACf,GACX,OACA,6BACA,yBAAKC,UAAU,UACX,yBAAKA,UAAU,SAAf,UACYD,EAAMa,OADlB,eACsCb,EAAMc,e,OCgErCE,G,iNA9DbC,MAAO,CAELC,MAAO,EACPC,UAAW,EACXC,OAAQC,EACRC,SAAS,EACTC,YAAY,I,EAIhBZ,UAAY,SAAAF,GACV,IAAMc,EAAc,EAAKN,MAAMM,aACC,IAA7BA,EAAYC,QAAQf,IACrBc,EAAYE,KAAKhB,GACjBiB,QAAQC,IAAIJ,IAGZ,EAAKD,QAAQM,UAAS,GAEV,EAAKX,MAAMC,MACP,EAAKD,MAAME,UAC7B,EAAKS,SAAS,CAAEN,QAAS,K,wEAKf,IAAD,OACT,OAEK,kBAAC,EAAD,KACC,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEA,wBAAIrB,UAAU,uBACb4B,KAAKZ,MAAMG,OAAOU,MAAK,SAACC,GAAD,OAAsBC,KAAKC,SAAW,MAAKC,KAAI,SAAAb,GAAS,OAChF,kBAAC,EAAD,CACGc,IAAKd,EAAUZ,GACfA,GAAIY,EAAUZ,GACdD,MAAOa,EAAUb,MACjBJ,UAAWiB,EAAUZ,GACrB2B,iBAAkB,EAAKnB,MAAMoB,UAC7BC,QAAS,EAAKP,iBACdpB,UAAW,EAAKA,gBAKnB,kBAAC,EAAD,W,GAhDU4B,cCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.325b8ae6.chunk.js","sourcesContent":["import React from 'react';\nimport './Wrapper.css';\n\nconst Wrapper = (props) => {\n    return (\n        <div className=\"wrapper\">\n        <div>{props.children}</div>\n        </div>\n    );\n};\n\nexport default Wrapper;","import React from 'react';\nimport '../MyBootstrap/FriendsBootstrap.css';\n\nconst Bootstrap = (props) => {\n    return (\n\n       \n\n        <div className= \"myjumbo\" >\n            <h1 className=\"display-4\">Friends Clicky Game</h1>\n            \n            <p className=\"lead\">\n                Click on the images to win points but if you click on the same image you will lose\n            </p>\n        </div>\n    );\n}\n\nexport default Bootstrap;","import React from 'react';\nimport './FendCards.css';\n// import Container from 'react-bootstrap/Container';\n\nconst FendCards = (props) => {\n\n    return (\n        \n        <div className=\"card col-md-3 hover\" >\n            <div className=\"img-container\">\n                <div className=\"row\" >\n               \n                <img alt={props.name} src={props.image} id={props.id} \n                onClick={() => props.ClickedId(props.id)}/>\n               \n                </div>           \n            </div>\n        </div>\n    );\n};\n\nexport default FendCards;","import React from 'react';\n\n\nconst NavBar = (props) => {\nreturn (\n    <div className=\"container\" id=\"nav\">\n\n    \n\n            <div className=\"row\">\n                <div className=\"col-md-1\"><h2>Score: {props.scores}</h2></div>\n               <div className=\"col-md-2\"></div>\n                <div className=\"col-md-3\"><h2>High Score: {props.highscore}</h2></div>\n            </div> \n\n\n\n    </div>\n   \n);\n};\n        \n\n\n\n\n\n\n\n\n\n\n\n\nexport default NavBar;","import React from 'react';\nimport './Score.css';\n\n\nconst Score = (props) => {\n    return(\n    <div>\n    <div className=\"Scores\">\n        <div className=\"total\">\n            Score: {props.scores} Highscore: {props.highscore}\n        </div>\n    </div>\n    </div>\n    )\n}\n\n\n\nexport default Score;","import React, { Component } from 'react';\nimport Wrapper from './/components/Wrapper/Wrapper';\nimport MyBootstrap from './components/MyBootstrap/FriendsBootstrap';\nimport FendCards from './components/FriendsCards/FendCards';\nimport NavBar from './components/NavBar/NavBar';\n\nimport Score from './components/Score/Score';\nimport fendCards from './fendCards.json';\nimport './App.css';\n\nclass App extends Component {\n  state ={\n    \n    score: 0,\n    highScore: 0,\n    fendId: fendCards,\n    outCome: false,\n    userClicked:[]\n\n};\n\nClickedId = id => {\n  const userClicked = this.state.userClicked;\n  if(userClicked.indexOf(id)=== - 1) {\n    userClicked.push(id);\n    console.log(userClicked);\n  }\n  else{\n    this.outCome.setState(true)\n  }\n  const score = this.state.score;\n  const highScore = this.state.highScore;\n  this.setState({ outCome: 0 })\n};\n  \n\n\n  render (){\n  return (\n     \n       <Wrapper>\n        <NavBar></NavBar>\n        <MyBootstrap />\n      \n        <ul className=\"list flex-container\">\n        {this.state.fendId.sort((shuffleFendsCard) => Math.random() - 0.5).map(fendCards => (\n        <FendCards\n           key={fendCards.id}\n           id={fendCards.id}\n           image={fendCards.image}\n           FendCards={fendCards.id}\n           ShuffleFendsCard={this.state.FendsCard} \n           clickIt={this.shuffleFendsCard}\n           ClickedId={this.ClickedId}/>\n        \n        ))}\n        </ul>\n        \n        <Score></Score>\n\n\n\n\n       </Wrapper>\n        \n      \n\n\n     \n   );\n};\n};\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}